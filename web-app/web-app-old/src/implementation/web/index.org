#+TITLE: Web interface to User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction
This document discribes how to implement a simple web application
using AngularJS MVC framework.
* What we have so far ????
   - Requirements
   - Data Model
   - Object implementation of the data model
   - Persistence via ORM (Database)
   - REST API url interface (a specification of urls for each operation)
   - Web interface to system ???
* What is MVC framework

  + The Model-View-Controller (MVC) is an architectural pattern that
    separates an application into three main logical components
   - The model
   - The view and
   - The controller. 

  + Each of these components are built to handle specific development
    aspects of an application.

  + MVC is one of the most frequently used industry-standard web
    development framework to create scalable and extensible projects.

  + Diagrame
    #+CAPTION:  Git local VCS
    #+LABEL:  Git local VCS
  [[./mvc.jpg]]

** Model
The Model is the part of the application that handles the logic for
the application data.  Often model objects retrieve data (and store
data) from a database.
** View
The View is the parts of the application that handles the display of
the data.  Most often the views are created from the model data.
** Controller
The Controller is the part of the application that handles user interaction.
Typically controllers read data from a view, control user input, and send input data to the model.
** Advantages
- The MVC separation helps you manage complex applications, because
  you can focus on one aspect a time. For example, you can focus on
  the view without depending on the business logic. It also makes it
  easier to test an application.

- The MVC separation also simplifies group development. Different
developers can work on the view, the controller logic, and the
business logic in parallel.

* Why MVC ??
* How to implement ??
** Source Code
*** Initiating Angular application on html page
#+BEGIN_SRC html 
<div ng-app="directoryApp">
  <div ng-view>
  </div>
</div>
#+END_SRC
*** Router 
- =app.js=
 - The following =route= is implemented for displaying the list of all
   users.The controller =users= will fetch the data from REST API and will
   render to the template =users.html= 

#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
var app = angular.module('directoryApp',['ngRoute','directoryApp.controllers']);
app.config(function($routeProvider){
  $routeProvider
    .when('/', {
      templateUrl : '/static/partials/users.html',
      controller  : 'users'
    })
#+END_SRC

- The following =route= is implemented for displaying detailed view of a specific
  user. The controller =view-users= will fetch the data from REST API and will
  render to the template =view-user.html=
#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
    .when('/view-user/:id', {
      templateUrl : '/static/partials/view-user.html',
      controller  : 'view-users'
    })
#+END_SRC

- Following =route= is implemented for adding a new user . The controller
  =add-users= will fetch the data from REST API and will render to the template
  =add-user.html=

#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no
    .when('/add-user',{
      templateUrl : '/static/partials/add-user.html',
      controller  : 'add-user'
    })
#+END_SRC

- Following =route= is implemented for editing the details of an existing
  user. The controller =edit-user= will fetch the data from REST API and will
  render to the template =edit-user.html=

#+BEGIN_SRC javascript :tangle ../../src/static/js/app.js :eval no

    .when('/edit-user/:id', {
      templateUrl : '/static/partials/edit-user.html',
      controller  : 'edit-user'
    });

});



#+END_SRC
*** Controller
- =controller.py=
**** Users Controller
- The following controller =users= makes a get request to =/users= and fetches
  the list all of users and stores the response in $scope.users

#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
var app = angular.module('directoryApp.controllers',[]);
app.controller("users", function($scope,  $http, $routeParams, $route,$window){
    $scope.role_name = $window.role_name;
    $scope.session_email = $window.session_email;
    $http.get("http://localhost:5000/users").success(function(response){
	$scope.users = response;
    }).error(function(response){alert("Unable to display content.")});

});
#+END_SRC

**** View-users Controller
  - The following controller =view-users= makes a get request to =/users/<int:id>= and
    stores the response in $scope.users
  - Also the delete function makes a delete request  to =/users/=

#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("view-users", function($scope,  $http, $routeParams, $route,$window){
    $scope.role_name = $window.role_name;
    //alert($window.user_id);
    $scope.user_id = $window.user_id;
    $scope.session_email = $window.session_email;
    $http.get("http://localhost:5000/users/" + $routeParams.id).success(function(response){
	$scope.users = response;
    }).error(function(response){
    alert("Unable to display the user.");
    });

    $scope.delete_user = function() {
        //alert("Delete function");
        $http.delete("http://localhost:5000/users/" + $routeParams.id, {headers : {'session' : $window.session_email}}).success(function(response){
        history.back();}).error(function(response){
        alert("Unable to delete user.");
        });
            };



});
#+END_SRC
**** Add-user Controller
  - The following controller =add-user= makes a post request to =/users= by
    passing a payload consisting of name,email,role and session(email of admin
    who is adding the user)

#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("add-user", function($scope,   $http,  $routeParams,  $route,$window){
    $scope.role_name=$window.role_name;
    $scope.session_email=$window.session_email;
    $scope.myText="you haven't clicked submit yet";
    $scope.add_user=function(){
       
       var data={
            name:$scope.name,
            email:$scope.email,
            role:$scope.role,
            session: $scope.session_email
            };
            console.log((data))
            console.log(typeof data)
            
            $http.post("http://localhost:5000/users",data).success(function(reponse){
            $scope.PostDataResponse=data;
            $scope.myText="You added successfully";
            history.back();
            }).error(function(response) {
            
            $scope.ResponseDetails ="Data:" +data+
            "<hr />status: " + status +
            "<hr />headers: " + header +
            "<hr />config: " + config;
            alert("Unable to add user.");
            });
            
            };
});
#+END_SRC

**** edit-user Controller
- The following controller =edit-user= makes a put request to =/users/<int:id>=
  by passing a payload that consists name, email,role_id and session(email of
  user who is logged in)

#+BEGIN_SRC javascript :tangle ../../src/static/js/controllers.js :eval no
app.controller("edit-user", function($scope,   $http,  $routeParams,  $route,$window){
    $scope.role_name=$window.role_name;
    $scope.session_email=$window.session_email;
    $scope.myText="you haven't clicked submit yet"
    $scope.edit_user=function(){
       
       var data={
            name:$scope.name,
            email:$scope.email,
            role_id:$scope.role,
            session: $scope.session_email
            };
            console.log((data))
            console.log(typeof data)
            
            $http.put("http://localhost:5000/users/" + $routeParams.id ,data).success(function(reponse){
            $scope.PostDataResponse=data;
            $scope.myText="You edited successfully";
            history.back();
            }).error(function(response) {
            $scope.ResponseDetails ="Data:" +data+
            "<hr />status: " + status +
            "<hr />headers: " + header +
            "<hr />config: " + config;
            alert("Unable to edit user.");
            });

            };

    
});
    
#+END_SRC

*** View
**** Users
- =users.html=
- This is html code that displays the list of all users
#+BEGIN_SRC html :tangle ../../src/static/partials/users.html :eval no
<div class="row">
  <div class="col-md-9"><h2>Users</h2></div>
  <div class="col-md-2" ng-if="role_name == 'admin'">
    <a href="#/add-user" class="btn btn-primary">Add User</a>
  </div>
</div>
<div class="row">
  <div class="col-md-12">
    <div class="table-responsive">
      <table class="table table-stripped">
	<thead>
	  <tr>
	    <th>S.NO</th>
            <th>Name</th>
	    <th>Role</th>
	    <th>Action</th>
	  </tr>
        </thead>
	<tbody>
	  <tr ng-repeat="user in users">
	    <td>{{ $index+1 }}</td>
            <td>{{ user.name }}</td>
	    <td>{{ user.role['name'] }}</td>
            <td><a href="#/view-user/{{user.id}}" class="btn btn-primary">View</a></td>
	  </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

#+END_SRC

**** View-user
- =view-user.html=
  - This is the html code that displays all the detailed view of a specific
    user

#+BEGIN_SRC html :tangle ../../src/static/partials/view-user.html :eval no
<div class="row">
  <div class="col-md-4"></div>
  <div class="col-md-5"><h2>Details of <b>{{ users.name }}</b></h2></div>
  <div class="col-md-3">
    <a onclick="history.back();" role="button" class="btn btn-success btn-large">Back</a>
  </div>
</div>
<div class="row">
  <div class="col-md-12">
    <div class="table-responsive">
      <table class="table table-stripped">
	<thead>
 	  <tr>
            <th class="span3">Name</th>
	    <th class="span7">Email-id</th>
	    <th class="span2">Role</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
            <td>{{ users.name }}</td>
	    <td>{{ users.email }}</td>
	    <td>{{ users.role }}</td>
          </tr>

      </tbody>
      </table>
      <div class="col-md-12">
	<div class="col-md-4"></div>
	<span ng-if="role_name == 'admin' || user_id == id">
          <a href="#/edit-user/{{id}}" class="btn btn-primary">Edit</a>
	  <span ng-if="role_name == 'admin' &&  user_id != id">
	    <a class="btn btn-primary" ng-click="delete_user(id)">Delete</a>
	  </span>
	</span>

      </div>
      <!--
      <div ng-if="user_id == (id+1)">
        <a href="#/edit-oc/{{oc.id}}" class="btn btn-primary">Edit</a>

	<a class="btn btn-primary" ng-click="delete_oc(oc.id)">Delete</a>
      </div>
      -->
    </div>
  </div>
</div>


#+END_SRC
**** Add-user
  - This html code displays the Add-user form
#+BEGIN_SRC html :tangle ../../src/static/partials/add-user.html :eval no
<div class="row">
  <div class="col-md-4"></div>
  <div class="col-md-4">
    <h2>Add User</h2>
    <span class="error"> {{ status }} </span>
    <form name="myForm" novalidate ng-submit="add_user(myForm.$valid)">
      <p>Name:<br>
	<input type="text" class="form-control" name="user"
               ng-pattern="/^[a-zA-Z\s]*$/" ng-model="name" required>
	<span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
	  <span ng-show="myForm.user.$error.required">Username is
	    required.</span>
          <span ng-show="myForm.user.$error.pattern">Enter valid name</span>
	</span>
      </p>
      <p>Email:<br>
	<input type="text" name="email" ng-pattern="/^[A-Za-z]+[A-Za-z0-9._-]+@[A-Za-z]+\.[A-Za-z.]{2,20}$/" class="form-control"  ng-model="email" required>
	<span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
	  <span ng-show="myForm.email.$error.required">Email is required.</span>
	  <span ng-show="myForm.email.$error.pattern">Enter valid email-id</span>
	</span>
      </p>
      <p>Role id:<br>
	<input type="number" name="role" ng-pattern="/^(1|2)$/" class="form-control"  ng-model="role" required>
	<span style="color:red" ng-show="myForm.role.$dirty && myForm.role.$invalid">
	  <span ng-show="myForm.role.$error.required">Role is required.</span>
	  <span ng-show="myForm.role.$error.pattern">Enter valid role-id</span>
	</span>
      </p>
      <p>
	<input type="submit" value="Save" class="btn btn-primary"  ng-disabled="myForm.$invalid">
	<a href="#/">Cancel</a>
      </p>
    </form>
    <p>{{ myText }} </p>
  </div>
  <div class="col-md-4"></div>
</div>
#+END_SRC
**** Edit-user
  - This html code displays the Edit-user form 
#+BEGIN_SRC html :tangle ../../src/static/partials/edit-user.html :eval no

<div class="row">
  <div class="col-md-4"></div>
  <div class="col-md-4">
    <h2>Add User</h2>
    <span class="error"> {{ status }} </span>
    <form name="myForm" novalidate ng-submit="add_user(myForm.$valid)">
      <p>Name:<br>
	<input type="text" class="form-control" name="user"
               ng-pattern="/^[a-zA-Z\s]*$/" ng-model="name" required>
	<span style="color:red" ng-show="myForm.user.$dirty && myForm.user.$invalid">
	  <span ng-show="myForm.user.$error.required">Username is
	    required.</span>
          <span ng-show="myForm.user.$error.pattern">Enter valid name</span>
	</span>
      </p>
      <p>Email:<br>
	<input type="text" name="email" ng-pattern="/^[A-Za-z]+[A-Za-z0-9._-]+@[A-Za-z]+\.[A-Za-z.]{2,20}$/" class="form-control"  ng-model="email" required>
	<span style="color:red" ng-show="myForm.email.$dirty && myForm.email.$invalid">
	  <span ng-show="myForm.email.$error.required">Email is required.</span>
	  <span ng-show="myForm.email.$error.pattern">Enter valid email-id</span>
	</span>
      </p>
    </form>
  </div>
  <div class="col-md-4"></div>
</div>
#+END_SRC

