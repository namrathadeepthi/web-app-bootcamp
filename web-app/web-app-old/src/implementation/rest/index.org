#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


This document illustrates building of the REST API.
* REST

** Initialization
#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# -*- coding: utf-8 -*-

import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort, current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from db import *
from utils_new import parse_request, jsonify_list
api = Blueprint('APIs', __name__)

system = System()
#+END_SRC

** URL mappping for REST API

|-------------+--------------------+-----------------------|
| METHOD      | FUNCTION           | URL                   |
|-------------+--------------------+-----------------------|
| GET         | get_users          | /users                |
|-------------+--------------------+-----------------------|
| GET         | get_roles          | /roles                |
|-------------+--------------------+-----------------------|
| GET         | get_user_by_id     | /users/<int:id>       |
|-------------+--------------------+-----------------------|
| GET         | get_role_by_id     | /roles/<int:id>       |
|-------------+--------------------+-----------------------|
| POST        | create_user        | /users                |
|-------------+--------------------+-----------------------|
| POST        | create_role        | /roles                |
|-------------+--------------------+-----------------------|
| PUT, DELETE | update_delete_user | /users/<int:id>       |
|-------------+--------------------+-----------------------|
| PUT, DELETE | update_delete_role | /roles/<int:id>       |
|-------------+--------------------+-----------------------|
| GET         | get_user_by_email  | /users/get_email      |
|-------------+--------------------+-----------------------|
| GET         | get_email_of_user  | /users/<int:id>/email |
|-------------+--------------------+-----------------------|
| GET         | get_name_of_user   | /users/<int:id>/name  |
|-------------+--------------------+-----------------------|
| PUT         | change_user_email  | /users/<int:id>email  |
|-------------+--------------------+-----------------------|
| GET         | index              | /                     |
|-------------+--------------------+-----------------------|
| GET, POST   | login              | /auth/login           |
|-------------+--------------------+-----------------------|
| GET         | logout             | /auth/logout          |
|-------------+--------------------+-----------------------|
                                    
** GET all users
   This is the REST API method to get all the users stored in the user set of
   the system class.
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users', methods=['GET'])
def get_users():
    global system
    system.get_users_from_database()
    return jsonify_list([i.to_client() for i in system.user_set])
#+END_SRC
   
** GET all roles
   The is the REST API method to get all the roles stored in the Role table.

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles', methods=['GET'])
def get_roles():
    return jsonify_list([i.to_client() for i in Role.get_all()])
#+END_SRC

** GET a user with id
   This is the REST API method to get a user by id.
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['GET'])
def get_user_by_id(id):
    record = User.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(record.to_client())
#+END_SRC

** GET a role with id
   This is the REST API method to get a role by id, from the Role table.
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['GET'])
def get_role_by_id(id):
    record = Role.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("role", id))

    return jsonify(record.to_client())
#+END_SRC

** Create a user
   This is the REST API method for creating a user. Only a user, who is an
   admin and is currently logged in may create a user.
   Usage:
   #+BEGIN_EXAMPLE
   POST request
   {
   "name": "Jimi hendrix",
   "email": "jimi@gmail.com",
   "role": 2,
   "session": "admin@vlabs.ac.in"
   }
   #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# not implemented for session, implement with session
@api.route('/users', methods=['POST'])
def create_user():

    ### Check if there is a session and act according to the specification
    global system
    if not request.json or not 'name' in request.json or not 'email' in request.json:
        abort(400)
    else:
        name = request.json['name']
        email = request.json['email']
        role = request.json['role']
        session_email = request.json['session']

        try:
            user = User(name=name,
                        email=email,
                        role=Role.get_by_id(role))

            user.save()
            system.user_set = User.get_all()
            return jsonify(user.to_client())
        except Exception, e:
            current_app.logger.error("Error occured while inserting"
                                     "user record: %s" % str(e))
            abort(500, str(e))
#+END_SRC

** Create a role
   This is the REST API method to create a role.

#+BEGIN_SRC python :tangle ../../src/api.py :eval no

@api.route('/roles', methods=['POST'])
def create_role():
    if not request.json or not 'name' in request.json:
        abort(400)
    else:
        name = request.json['name']
        try:
            role = Role(name)
            role.save()
            return jsonify(role.to_client())
        except Exception, e:
            current_app.logger.error("Error occured while inserting" 
                                     "role record: %s" % str(e))
            abort(500, str(e))

#+END_SRC

** Update/Delete user
   This is the REST API method to update or delete a user from the user set of
   the System object. An admin user may update or delete anyone. However, a
   user can only update himself. Also, an admin cannot delete himself.
*** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['PUT'])
def update_user(id):
    global system
    user_session = None
                   
    system.get_users_from_database()
    record = User.get_by_id(id)
    if not record:
        abort(404, 'No %s with id %s' % (user, id))
    
    
    
    for s in system.session_set:
        if s.user.email==request.json['session']:
            user_session=s

    role = record.role
            
    print user_session.user.email
    new_data = {}
    try:
        
        if 'name' in request.json:
            #system.set_name_of_user(record, request.json['name'], user_session)
            new_data['name'] = request.json['name']
        if 'email' in request.json:
            #system.set_email_of_user(record, request.json['email'], user_session)
            new_data['email'] = request.json['email']
        if 'role_id' in request.json:
            role = Role.get_by_id(request.json['role_id'])
        
        record.role = role
        system.logout(record,user_session)
        record.update(**new_data)
        system.get_users_from_database()
        
        
        session['role_name'] = record.role.name
        #session['user_id'] = record.id
        session['email'] = record.email
        system.login(record)
        return jsonify(User.get_by_id(id).to_client())
    except Exception, e:
        current_app.logger.error("Error occured while updating"
                                     " user record %d: %s" % (id, str(e)))
        abort(500, str(e))



@api.route('/users/<int:id>', methods=['DELETE'])
def delete_user(id):
    global system
    session = None
                   
    system.get_users_from_database()
    record = User.get_by_id(id)
    if not record:
        abort(404, 'No %s with id %s' % (user, id))

    
    delete_session_email= request.headers.get('session')
    delete_session = None
    for x in system.session_set:
        if x.user.email == delete_session_email:
            delete_session = x
    try:
   
        system.del_user(record,delete_session)
        return jsonify(id=id, status="success")
    except Exception, e:
        current_app.logger.error("Error occured while deleting"
                                     "user record %d: %s" % (id, str(e)))
        abort(500, str(e))

#+END_SRC
** Update/Delete a role
   This is the REST API method to update or delete a role in the role table.
*** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['PUT', 'DELETE'])
def update_delete_role(id):

    if 'session' not in request.json:
        abort(400)
    else:
        print "choose according to configuraton"
    record = Role.get_by_id(id)
    if not record:
        abort(404, 'No %s with id %s' % (role, id))

    if request.method == 'DELETE':
        try:
            record.delete()
            return jsonify(id=id, status="success")
        except Exception, e:
            current_app.logger.error("Error occured while deleting "
                                     "role record %d: %s" % (id, str(e)))
            abort(500, str(e))

    if request.method == 'PUT':
        try:
            if 'role' in request.json:
                record.role = request.json['role']

            record.update()
            
            return jsonify(Role.get_by_id(id).to_client())

        except Exception, e:
            current_app.logger.error("Error occured while updating "
                                     "role record %d: %s" % (id, str(e)))
            abort(500, str(e))
#+END_SRC


** Get user by email
   This is the REST API method to get a user from the user set by passing an email.
**** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/get_email', methods=['GET'])
def get_user_by_email():
    global system
    system.get_users_from_database()

    if 'email' not in request.json:
        abort(400)
    else:
        print "choose according to configuraton"
    
    record = None

    for x in system.user_set:
        if x.email == request.json['email']:
            record = x
    
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(record.to_client())
#+END_SRC

** Get email of user
   This is the REST API method to get the email of a particular user in the
   user set.
*** Implementation

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>/email', methods=['GET'])
def get_email_of_user(id):
    global system

    session = None
    system.get_users_from_database()
    if 'session' not in request.json:
        abort(400)
    else:
        print "choose according to configuraton"
    

    for s in system.session_set:
        if s.user.email==request.json['session']:
            session=s
    record = User.get_by_id(id)         
    if not record:
        abort(404, 'No %s with id %s' % (user, id))

        

    #if email_check == "email":
    #system.user_set = User.get_all()
    #record = User.get_by_id(id)
    new_data = {}
    new_data['email'] = system.get_email_of_user(record, session)        
    #if not record:
    #    abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(new_data)

#+END_SRC

** Get name of user
   This is the REST API method to get the name of the user in the user set.
*** Implementation

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>/name', methods=['GET'])
def get_name_of_user(id):
    global system

    session = None
    system.get_users_from_database()
    if 'session' not in request.json:
        abort(400)
    else:
        print "choose according to configuraton"
    

    for s in system.session_set:
        if s.user.email==request.json['session']:
            session=s
    record = User.get_by_id(id)         
    if not record:
        abort(404, 'No %s with id %s' % (user, id))

        

    #if email_check == "email":
    #system.user_set = User.get_all()
    #record = User.get_by_id(id)
    new_data = {}
    new_data['name'] = system.get_name_of_user(record, session)        
    #if not record:
    #    abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(new_data)

#+END_SRC

** Set email of user 
   This is the REST API method to set the email of a user. This method also
   checks if the entered email exists in the database. If so, it does not allow
   the change.
   
*** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>/email', methods=['PUT'])
def change_user_email(id):

    record = User.get_by_id(id)
    global system

    system.get_users_from_database()
    if not record:
        abort(404, 'No %s with id %s' % (user, id))

    session = None
    #system.get_users_from_database()
    if 'session' not in request.json:
        abort(400)
    else:
        print "choose according to configuraton"
    

    for s in system.session_set:
        if s.user.email==request.json['session']:
            session=s
    

#    if request.method == 'DELETE':
#        try:
#            record.delete()
#            return jsonify(id=id, status="success")
#        except Exception, e:
#            current_app.logger.error("Error occured while deleting"
#                                     "user record %d: %s" % (id, str(e)))
#            abort(500, str(e))

#    if request.method == 'PUT':
    #if email_update == "change_email":
    new_data = {}
    try:
            #if 'name' in request.json:
        new_data['name'] = system.get_name_of_user(record, session)
        if 'email' in request.json:
            new_data['email'] = request.json['email']
            #if 'roles' in request.json:
            #    role_ids = request.json['roles']
            #    roles = []
            #    for role_id in role_ids:
            #        roles.append(Role.get_by_id(role_id))
        new_data['role'] = system.get_role_of_user(record,session)
        #new_data['session'] = record.session
        record.update(**new_data)
        system.get_users_from_database()
        return jsonify(User.get_by_id(id).to_client())

    except Exception, e:
        current_app.logger.error("Error occured while updating"
                                     "user record %d: %s" % (id, str(e)))
        abort(500, str(e))
#+END_SRC


** Login/Logout
    These are the REST API methods for login and logout.
    If the user is already logged in then it will redirect to 'user-list.html'
    otherwise it will take a user to 'login.html'.

*** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py
@api.route("/", methods=['GET'])
def index():
    if request.method == 'GET':
        if ('email' in session):
            return render_template("user-list.html")
        else:
            return render_template("login.html")

@api.route("/auth/login", methods=['GET', 'POST'])
def login():
    global system
    user=None
    if request.method == 'POST':
        email = str(request.form['email'])
        url_for_getting_the_user = "%s/users" % \
                                   (APP_URL)
        backend_resp = requests.get(url_for_getting_the_user)
        user_list = backend_resp.json()
        if len(backend_resp.text.encode('ascii')) != 2:
            count = 0
            for user in range(len(user_list)):
                print len(user_list)
                print user_list[user]
                if str(email) == str(user_list[user]['email']):
                    current_app.logger.info("Successfully Logged in")
                    session['email'] = str(user_list[user]['email'])
                    session['role_name'] = str(user_list[user]['role']['name'])
                    session['user_id'] = str(user_list[user]['id'])
                    for u in system.user_set:
                        if u.email==str(email):
                           user=u
                    system.login(user)
                    print system.session_set
                    for x in system.session_set:
                        print x.user.email
                    return redirect("/")
                else:
                    count = count + 1
            if count == len(user_list):
                return render_template("login.html", message="Invalid email id")
            
@api.route('/auth/logout', methods=['GET'])
def logout_handler():
    global system
    
    
    user=None
    ses=None
    system.get_users_from_database()
    for s in system.session_set:
        if(s.user.email == session['email'] ):
            ses=s
    for u in system.user_set:
        if(u.email == session['email']):
            user=u
    system.logout(user,ses)
    session.pop('email', None)
    session.pop('role_name', None)   
    return redirect("/")

#+END_SRC


* Tests for REST API
** Initialization
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

# -*- coding: utf-8 -*-

import unittest
from flask.ext.testing import TestCase
from datetime import datetime
# import json

from src.db import *
from src.app import create_app
from src.op_exceptions import AttributeRequired
from src.api import system
config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+END_SRC

** User Tests
   The setup method creates all the tables and the teardown method deletes the
   tables. These methods are called in the beginning and at the end of the test
   cases, respectively.

*** Initialization
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no
class TestUser(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

#+END_SRC


*** test_get_all_users
    Test case for '/users' ['GET']
    Creates an admin and a user and makes a call to '/users' and hence tests get_all_users().
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_all_users(self):
        print "test_get_all_users"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        r = self.client.get('/users')
        result = json.loads(r.data)
        self.assertEquals(len(result), 2)

#+END_SRC

*** test_get_one_user
     Test case for '/users/<int:id>' ['GET']
     Makes a call to the given route and returns a user, if it is present in
     the user set.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_one_user(self):
        print "test_get_one_user"

        ### create a User
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name = "admin user",
                    email="admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name="normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()

        r = self.client.get('/users/1')
        result = json.loads(r.data)
        self.assertEqual(result['name'], "admin user")

#+END_SRC

*** test_update_existing_user
    Test case for '/users/<int:id>' ['PUT']
    Tests the updating of a particular user.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_update_existing_user(self):
        # Create a user
        # update the same user
        global system
        print "test_update_existing_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()

        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        admin_user = User.get_by_id(1)
        admin_session = Session(user = admin_user)
        system.session_set.append(admin_session)
        
        
        #for x in system.session_set:
        #    print x.to_client()

        payload = {'email': 'abcdef@gmail.com',
                   'name': 'NEW ADMIN',
                   'role_id': [1],
                   'session': 'admin@xyz.com'}
        headers = {'content-type': 'application/json'}
        response = self.client.put("/users/1",
                                   data=json.dumps(payload),
                                   headers=headers)

        self.assertEqual(response.status_code, 200)

#+END_SRC

*** test_create_new_user
    Test case for '/users' ['POST']
    Tests the creation of a new user, according to the bounds of the
    create_user function.
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_create_new_user(self):
        print "test_create_new_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name = "admin user",
                     email= "admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()

        payload = {'email': 'ttt@kkk.com',
                   'name': 'nearly normal user',
                   'role': [2],
                   'session': 't@g.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/users",
                                    data=json.dumps(payload),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_delete_user
    Test case for '/users/<int:id>' [DELETE] 
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_delete_user(self):
        global system
        print "test_delete_user"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        user2 = User(name="normal user",
                     email="normal@xyz.com",
                     role=role2)

        user2.save()
        
        system.session_set = []
        system.user_set = []

        system.get_users_from_database()
        #s=Session(user=user1)
        system.add_session(user1)

        headers = {'content-type': 'application/json', 'session': 'admin@xyz.com'}

        response = self.client.delete("/users/2", headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_create_role
    Test case for '/roles' ['POST']
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_create_role(self):
        print "test_create_role"
     

        payload = {'name': 'owner'}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/roles",
                                    data=json.dumps(payload),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC 

*** test_update_role
    Test case for '/roles/<int:id>' [PUT]
**** Implementation

#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no


    def test_update_role(self):
        # Create a user
        # update the same user
        global system
        print "test_update_role"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        system.get_users_from_database()
        s=Session(user=user1)
        system.add_session(user1)
        

        payload = {'role': 'owner',
                   'session' : 'admin@xyz.com'
                   }
        headers = {'content-type': 'application/json'}
        response = self.client.put("/roles/2",
                                   data=json.dumps(payload),
                                   headers=headers)

        self.assertEqual(response.status_code, 200)

#+END_SRC

*** test_delete_role
    Test case for '/roles/<int:id>' [DELETE]
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_delete_role(self):
        global system
        print "test_delete_role"
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()

        user1 = User(name="admin user",
                     email="admin@xyz.com",
                     role=role1)

        user1.save()
        system.get_users_from_database()
     
        
        s=Session(user=user1)
        system.add_session(user1)
        payload = {'session': 'admin@xyz.com'}

        headers = {'content-type': 'application/json'}

        response = self.client.delete("/roles/2",
                                      data=json.dumps(payload),
                                      headers=headers)

        self.assertEqual(response.status_code, 200)


#+END_SRC

*** test_get_user_by_email
    Test case for '/roles/<int:id>' [GET]
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_user_by_email(self):
        print "test_get_user_by_email"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()

        payload = { 'email' : 'normal@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/get_email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], user2.email)

#+END_SRC


*** test_get_email_of_user
    Test case for '/users/<int:id>/email'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_email_of_user(self):
        print "test_get_email_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/2/email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], user2.email)

#+END_SRC

*** test_get_name_of_user
    Test case for '/users/<int:id>/name'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_get_name_of_user(self):
        print "test_get_name_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com' }

        
        headers = {'content-type': 'application/json'}
        response = self.client.get("/users/2/name",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['name'], user2.name)

#+END_SRC


*** test_set_email_of_user
    Test case for '/users/<int:id>/email'
**** Implementation
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

    def test_set_email_of_user(self):
        print "test_set_email_of_user"

        ###Create Users
        role1 = Role("admin")
        role1.save()
        role2 = Role("user")
        role2.save()
        user1 = User(name = "admin user",
                    email = "admin@xyz.com",
                    role=role1)
        user1.save()
        user2 = User(name = "normal user",
                    email="normal@xyz.com",
                    role=role2)
        user2.save()
        
        system.user_set = []
        system.session_set = []

        system.get_users_from_database()
        system.add_session(user1)
        payload = { 'session' : 'admin@xyz.com',
                    'email' : 'abcd@xyz.com'
                    }
        
        headers = {'content-type': 'application/json'}
        response = self.client.put("/users/2/email",
                                   data=json.dumps(payload),
                                   headers=headers)
        result = json.loads(response.data)
        self.assertEquals(result['email'], "abcd@xyz.com")

#+END_SRC


** Run Tests
#+BEGIN_SRC python :tangle ../../tests/test_api.py :eval no

if __name__ == '__main__':
    unittest.main()
#+END_SRC
